// this file will write employee data to a .CSV file, thus the program will never instantiate a new instance of this class
// import directives (below are implicitly/automatically imported, though)
using System;
using System.IO; // import the System.IO namespace for the Directory and StreamWriter classes
using System.Collections.Generic;
using System.Net.Http; // import Http to use HttpClient class to import or download employee information from employee list
using System.Threading.Tasks; // allows us to use the Task object in the MakeBadges() method

// import SkiaSharp to handle badge images
// the error generated by this using directive says "are you missing a using directive or an assembly reference?"
// an assembly reference is similar to Node.js and npm, where we can npm install packages
// SkiaSharp is not available in .NET Core, so it must be manually added to the app
// use the .NET CLI to install it
    // dotnet add package SkiaSharp --version 2.88.0
// after installing, it will appear in the CatWorx.BadgeMaker.csproj file
using SkiaSharp;

// declared in the same namespace as the rest of the program, so it is accessible
namespace CatWorx.BadgeMaker
{
    // this class will be a collection of general methods that can be used repeatedly
    class Util
    {
        // public - access modifier indicates this method is available across the application
        // static - the method belongs to the class itself, not the individual instances or objects (don't need to create a new Util object to use it)
        // can access this method using Util.PrintEmployees();
        
        // PRINT EMPLOYEES METHOD ----------------------------------------
        // the employees argument of type List is passed in when the method is called
        public static void PrintEmployees(List<Employee> employees)
        {
            for (int i = 0; i < employees.Count; i++)
            {
                // {0,-10} - we want the first argument {0} to be the id, left-aligned and padded to at least 10 characters {-10}
                // {\t} - print a tab character
                // {1,-20} - the next argument {1} is the name, left aligned and padded to 20 characters {-20}
                // {\t} - print another tab
                // {2} - print the last argument with no formatting
                string template = "{0,-10}\t{1,-20}\t{2}";
                // String.Format() takes a string to use as a template and operates like a template literal to fill in values
                // in C#, each placeholder can define how its value is formatted and the values that follow the template in the list of arguments
                Console.WriteLine(String.Format(template, employees[i].GetId(), employees[i].GetFullName(), employees[i].GetPhotoUrl()));
            }
        }

        // MAKE CSV METHOD ----------------------------------------
        // outputs the employee list to a new .CSV file in a directory called "data"
        // the Directory and StreamWriter classes fall under the System.IO namespace (implicitly/automatically imported above)
        public static void MakeCSV(List<Employee> employees)
        {
            // check if "data" directory exists
            if(!Directory.Exists("data"))
            {
                // if the directory does not exist, create a new directory
                Directory.CreateDirectory("data");
            }
            // create a new csv file using the StreamWriter class
            // using - keyword disposes of the StreamWriter object once the file is written (instead of taking up storage in memory after it's instantiated)
            // using is the keyword both to import namespaces (above) and to temporarily use a resource (here)
            // when using a resource temporarily, whatever is defined in the parentheses is only available within the subsequent set of curly braces
            // once that block of code is run, the resource is removed (here, StreamWriter)
            using (StreamWriter file = new StreamWriter("data/employees.csv"))
            {
                file.WriteLine("ID,Name,PhotoUrl");
                // loop over employees and add new line to csv file
                for (int i = 0; i < employees.Count; i++)
                {
                    // write each employee to file using the template, passing in Employee class properties in as arguments, retrieved by getter methods in Employee class
                    string template = "{0},{1},{2}";
                    file.WriteLine(String.Format(template, employees[i].GetId(), employees[i].GetFullName(), employees[i].GetPhotoUrl()));
                }
            }
        }
        
        // MAKE BADGES METHOD ----------------------------------------
        // async - similar to async/await syntax in JS, because HttpClient object is asynchronous
        // Task = required return type for an async method that returns no value
        // public - accessible by Main() method
        // void - no data returned from method
        // static - scoped to class, so can be invoked directly without instantiating an object
        // List<> - Employee parameters, data source of emplyee info
        async public static Task MakeBadges(List<Employee> employees)
        // an asynchronous method will have a return type of Task if the method does not return anything
        // the return type will be Task<TResult> if the async method does return something, and the <TResult> value is replaced with the return type of the method
        {
            // // SKIASHARP ----------------------------------------
            // // SkiaSharp is a graphics system for .NET and C# for rendering 2D images and is based on Google's Skia Graphics Library
            // // SkiaSharp needs to be imported (not implicitly/automatically imported)

            // // first, convert badge.png (downloaded from https://imgur.com/0EMSs68) into an SKImage object to access the methods in this class:
            // // System.IO.Stream is a class that allows reading and writing of bytes or data from a source
            // // convert badge.png to a Stream using the OpenRead method from the System.IO File namespace
            // // the convert the Stream into a new SKImage using the FromEncodedData() method
            // SKImage newImage = SKImage.FromEncodedData(File.OpenRead("badge.png")); // pass in the filepath for the image
            // // the Encode() method is the first step to save the SKImage object into a new file
            // // Encode() returns the data type SKData, and when run with no arguments, encodes the image in a png format
            // SKData data = newImage.Encode();
            // // the SaveTo() method takes in a Stream to save the data into
            // // convert our destination filepath into a Stream using the OpenWrite() method, like above
            // data.SaveTo(File.OpenWrite("data/employeeBadge.png"));

            // HttpClient ----------------------------------------
            // HttpClient is a .NET Core class that can be used to send HTTP requests, read files, download webpages, and upload data
            // in this app, HttpClient will be used to import or download employee information (automatically/implicitly imported above)
            // the using keyword discards the instance of HttpClient after the codeblock is run to save on memory
            using(HttpClient client = new HttpClient())
            {
                for (int i = 0; i < employees.Count; i++)
                {
                    // convert photo url into SKImage
                        // use instance method in Employee class GetPhotoUrl()
                        // convert the url into a stream
                            // HttpClient.GetStreamAsync() - sends a GET request to the specified uri and returns the response body as a Stream in an async operation
                        // convert stream into SKImage
                            // SKImage.FromEncodedData() - creates an SKImage from a Stream
                    // convert badge template into SKImage
                    // place the images onto a canvas
                }
            }
        }
    }
}