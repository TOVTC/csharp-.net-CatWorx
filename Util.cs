// this file will write employee data to a .CSV file, thus the program will never instantiate a new instance of this class
// import directives (below are implicitly/automatically imported, though)
using System;
using System.IO; // import the System.IO namespace for the Directory and StreamWriter classes
using System.Collections.Generic;
using System.Net.Http; // import Http to use HttpClient class to import or download employee information from employee list
using System.Threading.Tasks; // allows us to use the Task object in the MakeBadges() method

// import SkiaSharp to handle badge images
// the error generated by this using directive says "are you missing a using directive or an assembly reference?"
// an assembly reference is similar to Node.js and npm, where we can npm install packages
// SkiaSharp is not available in .NET Core, so it must be manually added to the app
// use the .NET CLI to install it
    // dotnet add package SkiaSharp --version 2.88.0
// after installing, it will appear in the CatWorx.BadgeMaker.csproj file
using SkiaSharp;

// declared in the same namespace as the rest of the program, so it is accessible
namespace CatWorx.BadgeMaker
{
    // this class will be a collection of general methods that can be used repeatedly
    class Util
    {
        // public - access modifier indicates this method is available across the application
        // static - the method belongs to the class itself, not the individual instances or objects (don't need to create a new Util object to use it)
        // can access this method using Util.PrintEmployees();
        
        // PRINT EMPLOYEES METHOD ----------------------------------------
        // the employees argument of type List is passed in when the method is called
        public static void PrintEmployees(List<Employee> employees)
        {
            for (int i = 0; i < employees.Count; i++)
            {
                // {0,-10} - we want the first argument {0} to be the id, left-aligned and padded to at least 10 characters {-10}
                // {\t} - print a tab character
                // {1,-20} - the next argument {1} is the name, left aligned and padded to 20 characters {-20}
                // {\t} - print another tab
                // {2} - print the last argument with no formatting
                string template = "{0,-10}\t{1,-20}\t{2}";
                // String.Format() takes a string to use as a template and operates like a template literal to fill in values
                // in C#, each placeholder can define how its value is formatted and the values that follow the template in the list of arguments
                Console.WriteLine(String.Format(template, employees[i].GetId(), employees[i].GetFullName(), employees[i].GetPhotoUrl()));
            }
        }

        // MAKE CSV METHOD ----------------------------------------
        // outputs the employee list to a new .CSV file in a directory called "data"
        // the Directory and StreamWriter classes fall under the System.IO namespace (implicitly/automatically imported above)
        public static void MakeCSV(List<Employee> employees)
        {
            // check if "data" directory exists
            if(!Directory.Exists("data"))
            {
                // if the directory does not exist, create a new directory
                Directory.CreateDirectory("data");
            }
            // create a new csv file using the StreamWriter class
            // using - keyword disposes of the StreamWriter object once the file is written (instead of taking up storage in memory after it's instantiated)
            // using is the keyword both to import namespaces (above) and to temporarily use a resource (here)
            // when using a resource temporarily, whatever is defined in the parentheses is only available within the subsequent set of curly braces
            // once that block of code is run, the resource is removed (here, StreamWriter)
            using (StreamWriter file = new StreamWriter("data/employees.csv"))
            {
                file.WriteLine("ID,Name,PhotoUrl");
                // loop over employees and add new line to csv file
                for (int i = 0; i < employees.Count; i++)
                {
                    // write each employee to file using the template, passing in Employee class properties in as arguments, retrieved by getter methods in Employee class
                    string template = "{0},{1},{2}";
                    file.WriteLine(String.Format(template, employees[i].GetId(), employees[i].GetFullName(), employees[i].GetPhotoUrl()));
                }
            }
        }
        
        // MAKE BADGES METHOD ----------------------------------------
        // async - similar to async/await syntax in JS, because HttpClient object is asynchronous
        // Task = required return type for an async method that returns no value
        // public - accessible by Main() method
        // void - no data returned from method
        // static - scoped to class, so can be invoked directly without instantiating an object
        // List<> - Employee parameters, data source of emplyee info
        async public static Task MakeBadges(List<Employee> employees)
        // an asynchronous method will have a return type of Task if the method does not return anything
        // the return type will be Task<TResult> if the async method does return something, and the <TResult> value is replaced with the return type of the method
        {
            // SKIASHARP ----------------------------------------
            // SkiaSharp is a graphics system for .NET and C# for rendering 2D images and is based on Google's Skia Graphics Library
            // SkiaSharp needs to be imported (not implicitly/automatically imported)
            
            // SKBitmap layout variables to indicate image or text position in pixels (see below for explanation)
            int BADGE_WIDTH = 669;
            int BADGE_HEIGHT = 1044;
            
            int PHOTO_LEFT_X = 184;
            int PHOTO_TOP_Y = 215;
            int PHOTO_RIGHT_X = 486;
            int PHOTO_BOTTOM_Y = 517;

            int COMPANY_NAME_Y = 150;
            int EMPLOYEE_NAME_Y = 600;
            int EMPLOYEE_ID_Y = 730;

            // HttpClient ----------------------------------------
            // HttpClient is a .NET Core class that can be used to send HTTP requests, read files, download webpages, and upload data
            // in this app, HttpClient will be used to import or download employee information (automatically/implicitly imported above)
            // the using keyword discards the instance of HttpClient after the codeblock is run to save on memory
            using(HttpClient client = new HttpClient())
            {
                for (int i = 0; i < employees.Count; i++)
                {
                    // SKImage ----------------------------------------
                    // convert the employee url into an SKImage object to access the methods in this class
                    // use the GetPhotoUrl() instance method in the Employee class to retrieve the employee's photo
                    // GetStreamAsync() - sends a GET request to the specified uri and returns the response body as a Stream in an async operation (converts url into a Stream)
                    // System.IO.Stream is a class that allows reading and writing of bytes or data from a source
                    // SKImage.FromEncodedData() - creates an SKImage from a Stream
                    SKImage photo = SKImage.FromEncodedData(await client.GetStreamAsync(employees[i].GetPhotoUrl()));
                    // create a new SKImage from our badge.png layout image
                    // convert badge.png (downloaded from https://imgur.com/0EMSs68) into an SKImage object to access the methods in this class
                    // convert badge.png to a Stream using the OpenRead method from the System.IO File namespace
                    // the convert the Stream into a new SKImage using the FromEncodedData() method
                    SKImage background = SKImage.FromEncodedData(File.OpenRead("badge.png")); // pass in the filepath for the image
                    
                    // SKBitmap ----------------------------------------
                    // a bitmap is a representation of an image or graphic that uses pixels to create an image
                    // the SKBitmap data type allows the pixel count on the x-axis and y-axis of a 2D image to precisely map placement and size
                    // to create an SKBitmap instance, initialize with size parameters (declared above)
                    SKBitmap badge = new SKBitmap(BADGE_WIDTH, BADGE_HEIGHT); // height and width reflect the size of the badge
                    
                    // SKCanvas ----------------------------------------
                    // convert the SKBitmap into an SKCanvas object to access the SKCanvas methods
                    // the SKCanvas acts as a wrapper around the badge bitmap and allows direct graphical modifications to the badge
                    SKCanvas canvas = new SKCanvas(badge);
                    // DrawImage() - allows us to draw images onto the badge (insert a badge template image object named background onto the badge)
                    // the method's arguments takes an SKImage and uses the SKRectangle object for placement and size
                    // SKRect - a SkiaSharp class that the allows the allocation of position and size on the badge (the arguments refer to the coordinates for the upper left and lower right corners of the rectangle)
                    canvas.DrawImage(background, new SKRect(0, 0, BADGE_WIDTH, BADGE_HEIGHT)); // (x coord of upper left, y coord of upper left, x coord of lower right, y coord of lower right)
                    // use the DrawImage() method again to insert the employee photo onto the SKCanvas with location coordinates and size dimensions
                    canvas.DrawImage(photo, new SKRect(PHOTO_LEFT_X, PHOTO_TOP_Y, PHOTO_RIGHT_X, PHOTO_BOTTOM_Y)); // see variable declarations above

                    // the SKCanvas DrawText() class draws a specified text string starting at the specified coodrinates using an SKPaint object
                    // DrawText(String, Single, Single, SKPaint);
                    // the first argument is the string to be printed, the next two are x and y coordinates, which are of data type single (the float keyword is an alias for System.single), and an SKPaint object
                    // SKPaint is an object that defines specific characteristics about the text to be drawn (colour, font, size, alignment, etc.)
                    
                    // instantiate a new SKPaint object and add our specific properties
                    SKPaint paint = new SKPaint();
                    paint.TextSize = 42.0f;
                    paint.IsAntialias = true;
                    paint.Color = SKColors.White;
                    paint.IsStroke = false;
                    paint.TextAlign = SKTextAlign.Center;
                    paint.Typeface = SKTypeface.FromFamilyName("Arial");

                    // write company name
                    // because we want our text centered on the badge, our second argument (x coordinate) will be computed as half the value of the width of the badge (BADGE_WIDTH/2f)
                    // don't forget the f suffix so our product is saved as a float datatype, otherwise it would be rounded to the nearest whole number (int cannot hold decimal values)
                    canvas.DrawText(employees[i].GetCompanyName(), BADGE_WIDTH/2f, COMPANY_NAME_Y, paint); // see above for variables

                    // write employee name
                    // update the font colour
                    paint.Color = SKColors.Black;
                    canvas.DrawText(employees[i].GetFullName(), BADGE_WIDTH/2f, EMPLOYEE_NAME_Y, paint); // see above for variables

                    // write employee id
                    // update font
                    paint.Typeface = SKTypeface.FromFamilyName("Courier New");
                    canvas.DrawText(employees[i].GetId().ToString(), BADGE_WIDTH/2f, EMPLOYEE_ID_Y, paint); // see above for variables

                    // create the final badge - test to see that the images and text have been inserted
                    // pass the badge bitmap into the FromBitmap() method to create a new SKImage
                    SKImage finalImage = SKImage.FromBitmap(badge);
                    // the Encode() method is the first step to save the SKImage object into a new file
                    // Encode() returns the data type SKData, and when run with no arguments, encodes the image in a png format
                    // take the SKImage and use the Encode() method to convert to a png
                    SKData data = finalImage.Encode();
                    // the SaveTo() method takes in a Stream to save the data into
                    // convert our destination filepath into a Stream using the OpenWrite() method
                    // use string interpolation to dynamically create filepaths so multiple badges can be created
                    // but OpenWrite can't read string interpolation, so convert the file name into a string using String.Format() first 
                    string template = "data/{0}_badge.png";
                    data.SaveTo(File.OpenWrite(string.Format(template, employees[i].GetId())));
                }
            }
        }
    }
}