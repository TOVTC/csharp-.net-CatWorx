// this file will retrieve data from an api, thus the program will never instantiate a new instance of this class
// import directives (below are implicitly/automatically imported, though)
using System;
using System.Collections.Generic;
using System.Net.Http; // import Http to use HttpClient class to import or download employee information from employee list
using System.Threading.Tasks; // allows us to use the Task object in the MakeBadges() method

// import Newtonsoft.Json to handle JSON data
// the error generated by this using directive says "are you missing a using directive or an assembly reference?"
// an assembly reference is similar to Node.js and npm, where we can npm install packages
// Newtonsoft.Json is not available in .NET Core, so it must be manually added to the app
// use the .NET CLI to install it
    // dotnet add package Newtonsoft.json
// after installing, it will appear in the CatWorx.BadgeMaker.csproj file
using Newtonsoft.Json.Linq;

// one way to include employee data without manually typing it is to import a CSV, which would use the StreamReader class
// this app will retrieve employee data from the Random User Generator API from the (https://randomuser.me/api/?results=10&nat=us&inc=name,id,picture) endpoint instead

// declared in the same namespace as the rest of the program, so it is accessible
namespace CatWorx.BadgeMaker{
    class PeopleFetcher
    {
        // GET EMPLOYEES METHOD ----------------------------------------
        // the GetEmployees() method will return a list of employees, no parameters required
        // Employee is a custom data type - defining a class in C# registers that class name as a custom type
        public static List<Employee> GetEmployees()
        {
            // intialize a list of Employee class instances called employees
            // we do not need to import Employee because of the namespace scope declaration
            List<Employee> employees = new List<Employee>();

            // collect user values until the value is an empty string
            while (true)
            {
                Console.WriteLine("Enter first name : (leave empty to exit)");
                // get a name from the console and assign it to a variable
                string firstName = Console.ReadLine() ?? ""; // .NET runtime halts here and waits for input before it continues executing on the next line
                // the null coalescing operator ?? is similar to ternary
                // ?? checks whether the value from the command line is null (because input can only be of type string) and replaces it with the value after the operator (here it's an empty string)
                if (firstName == "")
                {
                    // break the while loop if the user hits enter without typing a name
                    break;
                }
                
                // if first name is blank, the remaining Console.WriteLine code will not execute
                Console.Write("Enter last name: ");
                string lastName = Console.ReadLine() ?? "";
                Console.Write("Enter ID: ");
                // Console.ReadLine() only returns string values, so we cast it to an integer before storing
                int id = Int32.Parse(Console.ReadLine() ?? "");
                Console.Write("Enter Photo URL: ");
                string photoUrl = Console.ReadLine() ?? "";

                // Create a new Employee instance
                Employee currentEmployee = new Employee(firstName, lastName, id, photoUrl);
                employees.Add(currentEmployee);
            }
            // don't forget to return the generated list
            return employees;
        }

        // GET FROM API METHOD ----------------------------------------
        // an asynchronous method will have a return type of Task if the method does not return anything
        // the return type will be Task<TResult> if the async method does return something, and the <TResult> value is replaced with the return type of the method
        async public static Task<List<Employee>> GetFromApi()
        {
            List<Employee> employees = new List<Employee>();
            // HttpClient is a .NET Core class that can be used to send HTTP requests, read files, download webpages, and upload data
            // in this app, HttpClient will be used to import or download employee information (automatically/implicitly imported above)
            // the using keyword discards the instance of HttpClient after the codeblock is run to save on memory
            using (HttpClient client = new HttpClient())
            {
                // GetStringAsync will retrieve all information from the specified resource as a string
                string response = await client.GetStringAsync("https://randomuser.me/api/?results=10&nat=us&inc=name,id,picture");
                // the employee data is returned as a string - in JS we would then just convert the string back to JSON
                // but C# doesn't have object literals, so it won't hold the different data types returned by the API request
                // it is possible to serialize (convert C# class to JSON) and deserialize (convert JSON to C# class) data
                // but this would only work if there was a one-to-one match between the data, which is rare
                // one potential solution would be to create another class that acts as a model for the API and accounts for nested properties
                // or you could search for .NET frameworks (like npm packages) to help with handling the data

                // JSON.NET (NEWTONSOFT.JSON) FRAMEWORK ----------------------------------------
                // Newtonsoft.Json is a JSON framework for .NET that allows serializing and converting between .NET Objects and JSON as well as LINQ to JSON for manually reading and writing JSON
                // Newtonsoft.Json needs to be imported (not implicitly/automatically imported)
                // Newtonsoft.Json allows access to the JObject class that allows us to parse JSON
                // JObject.Parse() converts the string downloaded from the API into a JObject
                JObject json = JObject.Parse(response);
                // the SelectToken() allows us to use JSON dot and bracket notation to retrieve specific pieces of information
                // the dot and bracket notation must be passed into SelectToken() as a string (e.g. json.SelectToken("results[0].name.first"))
                // json.SelectToken("results") will provide the entire array to iterate through
                // however, a JObject isn't a real array, so a for loop will not work for iterating
                Console.WriteLine(json.SelectToken("results[0].name.first"));
                Console.WriteLine(json.SelectToken("results[1].name.first"));
                Console.WriteLine(json.SelectToken("results[2].name.first"));
            }
            return employees;
        }

        // Convert JSON to C# data types
        // create a new employee for each person that we fetched from the API
    }
}